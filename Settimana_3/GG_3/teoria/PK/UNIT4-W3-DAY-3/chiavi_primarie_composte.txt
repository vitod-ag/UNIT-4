Nelle situazioni in cui si lavora con database preesistenti o con vincoli particolari che richiedono l'uso di chiavi primarie composte (cioè chiavi formate da più campi), è necessario adottare un approccio diverso nella mappatura delle entità JPA. In questi casi, si crea una classe aggiuntiva per rappresentare la chiave composta. Questa classe è generalmente conosciuta come "Classe Chiave Primaria Composta" o "Classe Identificativa". Ecco una panoramica del processo:

Passaggi per Creare Chiavi Primarie Composte in JPA

1. Definire la Classe Identificativa
- Caratteristiche:
  - Deve essere una classe `public` e `serializable`.
  - Deve avere un `hashCode()` e un `equals()` ben definiti.
  - Deve contenere tutti i campi che fanno parte della chiave primaria composta.
- Annotazione `@Embeddable`: Questa annotazione indica che la classe è destinata a essere incorporata in altre entità.

java
@Embeddable
public class ChiaveComposta implements Serializable {
    private String campo1;
    private String campo2;

    // Costruttori, getter, setter, hashCode(), equals()
}


2. Utilizzare la Classe Identificativa nell'Entità
- Annotazione `@EmbeddedId`: L'entità che utilizza la chiave composta deve avere un campo annotato con `@EmbeddedId`, che fa riferimento alla classe chiave composta.

java
@Entity
public class EntitaConChiaveComposta {
    @EmbeddedId
    private ChiaveComposta chiave;

    // Altri campi e metodi
}


3. Gestire Relazioni con Chiavi Composte
- Relazioni: Se devi definire relazioni con entità che utilizzano chiavi composte, dovrai fare riferimento ai campi della classe chiave primaria composta.
- Annotazioni `@MapsId` e `@JoinColumns`: Utilizzate per mappare le relazioni con chiavi composte.

Considerazioni Importanti
- Unicità: L'unicità è garantita dalla combinazione di tutti i campi nella chiave composta.
- Prestazioni: La gestione delle chiavi composte può essere più complessa e potenzialmente meno efficiente rispetto all'uso di chiavi primarie semplici.
- Complessità: Le chiavi composte aumentano la complessità del modello di dati e della logica di business, quindi dovrebbero essere usate solo quando strettamente necessario.

Esempio Pratico
Immagina di avere una tabella `OrdineArticolo` con una chiave primaria composta da `idOrdine` e `idArticolo`. Creeresti una classe `ChiaveOrdineArticolo` con `@Embeddable` e poi la utilizzeresti in `OrdineArticolo` con `@EmbeddedId`.

Questa metodologia permette di lavorare in modo efficace con chiavi primarie composte in JPA, garantendo che la mappatura delle entità rispecchi correttamente la struttura e i vincoli del database sottostante.