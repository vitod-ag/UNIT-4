Le classi `BlogPost`, `Category`, `Document` e `User` forniscono un esempio concreto di come le relazioni tra entità possono essere gestite in Hibernate utilizzando annotazioni JPA. Ogni classe rappresenta un'entità e le relazioni tra di loro sono definite attraverso varie annotazioni JPA. Analizziamo ciascuna relazione e le annotazioni correlate:

BlogPost

Relazioni
- ManyToOne con User: Ogni `BlogPost` è associato a un solo `User`. L'annotazione `@ManyToOne` indica questa relazione e `@JoinColumn(name = "user_id", nullable = false)` specifica che la colonna `user_id` nella tabella `blogs` è la chiave esterna che collega al `User`. `nullable = false` significa che ogni post deve avere un utente associato.
  
- ManyToMany con Category: Un `BlogPost` può appartenere a più `Category` e viceversa. L'annotazione `@ManyToMany` e `@JoinTable` definiscono una Junction Table `blogs_categories` con due colonne di join, `blog_id` e `category_id`, per gestire questa relazione.

Category

Relazioni
- ManyToMany con BlogPost: Simile alla classe `BlogPost`, ma qui l'annotazione `@JoinTable` inverte le colonne di join, ponendo `category_id` come colonna di join per la categoria e `blog_id` come colonna inversa.

Document

Relazioni
- OneToOne con User: Ogni `Document` è associato a un solo `User`. `@OneToOne` e `@JoinColumn(name = "user_id", nullable = false, unique = true)` definiscono questa relazione. Qui, `unique = true` garantisce che un `User` sia associato a un solo `Document`.

User

Relazioni
- OneToOne con Document: Definisce una relazione bidirezionale con `Document`. `mappedBy = "user"` indica che `User` è il lato passivo della relazione e il mapping è controllato dalla proprietà `user` in `Document`.
  
- OneToMany con BlogPost: Indica che un `User` può avere più `BlogPost`. La relazione è bidirezionale e controllata dal campo `user` in `BlogPost`.

Spiegazione Didattica

Concetti Chiave
1. Annotazioni di Relazione: `@OneToOne`, `@OneToMany`, `@ManyToOne`, e `@ManyToMany` definiscono il tipo di relazione tra le entità.
2. Annotazione `@JoinTable`: Utilizzata per definire una Junction Table nelle relazioni Many-to-Many.
3. Annotazione `@JoinColumn`: Specifica il nome della colonna di chiave esterna utilizzata in una relazione.
4. Bidirezionalità: Presente nelle relazioni OneToOne e OneToMany con `User`. Permette di navigare la relazione in entrambe le direzioni.

Aspetti Pratici
- Relazioni tra Entità: Ogni classe rappresenta un'entità in un database relazionale, e le relazioni tra queste entità sono mappate utilizzando annotazioni JPA.
- Chiavi Esterne e Tabelle di Join: Le chiavi esterne e le tabelle di join sono specificate attraverso annotazioni, che gestiscono la relazione a livello di database.
- Gestione delle Relazioni Bidirezionali: Particolarmente importante nelle relazioni OneToOne e OneToMany, dove `mappedBy` è utilizzato per indicare la proprietà che possiede la relazione.
